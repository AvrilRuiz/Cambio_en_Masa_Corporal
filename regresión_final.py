# -*- coding: utf-8 -*-
"""Regresión Final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Kg9YVLSoe5zuWzAuAuPVjXnUUPFE4aO1

#Fases 3 y 4. Preparación y modelación de los datos
Avril Michelle Ruiz Martínez 

A00833018
"""

import pandas as pd # importa la librería pandas y la asigna a la variable pd

datos_consumo = pd.read_excel('alimentos.xlsx') # indicamos el nombre de nuestro archivo a ser leído

datos_consumo.head()

""" con la función groupby agrupamos los datos de la 
 columna Momento y con count() los contamos para obtener subtotales """
datos_consumo.groupby("Momento").count()

datos_consumo.describe()

"""##Seleccionando los datos


"""

datos_seleccionados = datos_consumo.iloc[:,3:8] # : selecciona todas las filas y las columnas de la 3 a la 7 (empiezan en 0)
datos_seleccionados # desplegamos el dataframe

datos_seleccionados.info()

"""##Limpiando los datos"""

datos_seleccionados.isnull()   # si es un valor faltante o nulo regresa True

datos_seleccionados.isnull().values.any()   # regresa False si no hay ningún elemento nulo en el dataframe

dataset = datos_seleccionados.dropna()    # creamos un nuevo dataframe descartando los valores nulos o vacíos 
dataset

dataset.isnull().sum() # validamos que no tenemos valores nulos en ninguna columna, todos deben dar cero

"""##Preparando los datos"""

dataset.columns # vemos los nombres de nuestras columnas para asignarlos a las variables

x = dataset[['Carbohidratos (g)', 'Lípidos/grasas (g)', 'Proteína (g)', 'Sodio (mg)']].values # variables independientes

y = dataset['Calorías (kcal)'].values # variable dependiente

from sklearn.model_selection import train_test_split # importamos la herramienta para dividir los datos de SciKit-Learn

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=0) # asignación de los datos 80% para entrenamiento y 20% para prueba, sin aplicar un shuffle antes de dividir los datos

"""##Modelación de los datos"""

from sklearn.linear_model import LinearRegression # importamos la clase de regresión lineal

modelo_regresion = LinearRegression() # modelo de regresión será el objeto de la clase

modelo_regresion.fit(x_train, y_train) # aprendizaje automático con base en nuestros datos

x_columns = ['Carbohidratos (g)', 'Lípidos/grasas (g)', 'Proteína (g)', 'Sodio (mg)']
coeff_df = pd.DataFrame(modelo_regresion.coef_, x_columns, columns=['Coeficientes'])
coeff_df # despliega los coefientes y sus valores; por cada unidad del coeficente, su impacto en las calorías será igual a su valor

y_pred = modelo_regresion.predict(x_test) # probamos nuestro modelo con los valores de prueba

validacion = pd.DataFrame({'Actual': y_test, 'Predicción': y_pred, 'Diferencia': y_test-y_pred })
 # creamos un dataframe con los valores actuales y los de predicción

muestra_validacion = validacion.head(25) # elegimos una muestra con 25 valores 

muestra_validacion # desplegamos esos 25 valores

validacion["Diferencia"].describe()   # obtenemos la estadística descriptiva de la columna Diferencia:

from sklearn.metrics import r2_score # importamos la importamos la métrica R cuadrada (coeficiente de determinación)

r2_score(y_test, y_pred) # indicamos nuestros valores reales y calculados

"""##Visualización de los datos"""

import matplotlib.pyplot as plt # importamos la librería que nos permitirá graficar

muestra_validacion.plot.bar(rot=0)  # creamos un gráfico de barras con el dataframe que contiene nuestros datos actuales y de predicción

plt.title("Comparación de calorías actuales y de predicción") # indicamos el título del gráfico

plt.xlabel("Muestra de alimentos") # indicamos la etiqueta del eje de las x, los alimentos

plt.ylabel("Cantidad de calorías") # indicamos la etiqueta del eje de las y, la cantidad de calorías

plt.show() # desplegamos el gráfico

"""#El efecto del consumo calórico en el tiempo"""

import pandas as pd  # importa la librería pandas y la asigna a la variable pd

datos_consumo = pd.read_excel('alimentos.xlsx')  # indicamos el nombre de nuestro archivo a ser leído

datos_consumo.head()

datos = datos_consumo[["Fecha (dd/mm/aa)","Calorías (kcal)"]]  # seleccionamos las dos columnas que necesitaremos

datos.head()  # imprimiendo los datos selecccionados

suma_calorias = datos["Calorías (kcal)"].sum()
suma_calorias  # despliega el total de calorias

# Contaremos el total de días diferentes con la función nunique():
dias = datos["Fecha (dd/mm/aa)"].nunique()
dias

calorias_promedio = suma_calorias / dias  # total de calorías consumidas entre el número de días que tomó consumirlas
print("Tu promedio de calorías consumidas en", dias,"días es:", calorias_promedio.round(2))

peso = int(input("Ingresa tu peso en kilogramos: "))

altura = int(input("Ingresa tu altura en centimetros: "))

edad = int(input("Ingresa tu edad en años: "))

genero = input("Ingresa tu género, Mujer/Hombre: ")

if(genero == "Mujer"):
   calorias_requeridas = 655+(9.56*peso)+(1.85*altura)-(4.68*edad) # fórmula para estimar calorías requeridas en mujer

elif(genero == "Hombre"):
  calorias_requeridas = 66.5+(13.75*peso)+(5*altura)-(6.8*edad) # fórmula para estimar calorías requeridas en hombre

print("Con base en tus datos, tu consumo de calorías al día debe ser de:", calorias_requeridas)

diferencia = calorias_promedio - calorias_requeridas

diferencia

efecto_anual = diferencia * 450/3500 * 365 /1000 # realiza la proporción, se multiplica por 365 (días) y se divide entre 1000 (gramos) para obtener kilogramos

print("Si continuas con el consumo calórico actual, en un año tu cambio de masa corporal sería aproximadamente de:",efecto_anual,"kg")